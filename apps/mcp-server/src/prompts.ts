import type { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

export function prompts(server: McpServer) {
    server.registerPrompt("build_hopper_app", {
        title: "How to Use Component",
        description:
            "Use this prompt to build Hopper apps.",
        argsSchema: { query: z.string() }
    }, ({ query }) => ({
        messages: [{
            role: "user",
            content: {
                type: "text",
                text:
                `
                    Your role:
                    Assume you are an expert UI/UX designer and an experienced frontend developer who is picky on design details. Follow modern industry standards for spacing, layout, and visual hierarchy.

                    Rules to follow:
                    - **Important** Follow styling, tokens, icons, and components.
                    - ALWAYS prioritize using semantic tokens when possible.
                    - NEVER EVER use emojis or special characters as icons. USE PROVIDED ICONS.
                    - NEVER EVER use raw HTML(e.g. div, span, table, etx.) or Style(e.g. style={margin: 13px}). Use Hopper components and styles.

                    - Always consider responsiveness and accessibility.

                    Task:
                    ${query}
                    `
            }
        }]
    })
    );

        server.registerPrompt("generate_code_from_figma_design", {
        title: "Generate code from the provided figma design",
        description:
            "Use this prompt to properly generate code from figma design. This prompt relies on Figma MCP.",
        argsSchema: { figma_design_url: z.string() }
    }, ({ figma_design_url }) => ({
        messages: [{
            role: "user",
            content: {
                type: "text",
                text:
                `
                    Generate the selected Figma frame using Hopper Design System components, styles and tokens.

                    Figma design: ${figma_design_url}

                    REQUIREMENTS:
                    1. **Initial Code Generation:**
                    - Use Figma MCP #get_image and #get_code and #get_variable_defs tools from Figma to generate initial codes
                    - Focus on mapping visual (generated by #get_image) to proper Hopper components first.
                    - Don't focus a lot on #get_code as it might be misleading. Use it more to find out styling values (like colors, sizes, fonts, etc)
                    - **CRITICAL:** When converting the code to Hopper, you **MUST** keep texts EXACTLY similar to Figma content.

                    2. **Hopper Design System Refinement:**
                    - The Figma file is already based on Hopper design system.
                    - Review and refine the generated code using Hopper Design System MCP server
                    - Ensure proper Hopper component usage by reading documentation from Hopper MCP
                    - Verify all styling uses Hopper design tokens (never raw CSS values or style prop)

                    3. **Implementation & Quality Assurance:**
                    - Build the complete implementation with proper Hopper patterns
                    - **CRITICAL:** Use Figma MCP #get_image tool again to compare against original design
                    - Make adjustments and repeat comparison until achieving pixel-perfect match
                    - Run final validation using Hopper MCP #validate_component_structure tool

                    DELIVERABLE: A 1:1 match with the Figma design using proper Hopper Design System patterns.
                `
            }
        }]
    })
    );
}
