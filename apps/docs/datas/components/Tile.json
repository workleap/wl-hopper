[{"tags":{},"filePath":"/packages/components/src/tile/src/Tile.tsx","description":"","displayName":"Tile","methods":[],"props":{"id":{"defaultValue":null,"description":"The id of the Tile, matching the values used in TileGroup's `selectedKeys` prop.","name":"id","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"TileProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"TileProps"}],"required":true,"type":{"name":"Key"}},"slot":{"defaultValue":null,"description":"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.","name":"slot","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"SlotProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"SlotProps"}],"required":false,"type":{"name":"string | null"}},"style":{"defaultValue":null,"description":"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.","name":"style","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"StyleRenderProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"StyleRenderProps"}],"required":false,"type":{"name":"CSSProperties | ((values: ToggleButtonRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},"children":{"defaultValue":null,"description":"The children of the component. A function may be provided to alter the children based on component state.","name":"children","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"RenderProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"RenderProps"}],"required":false,"type":{"name":"ReactNode | ((values: ToggleButtonRenderProps & { defaultChildren: ReactNode; }) => ReactNode)"}},"aria-expanded":{"defaultValue":null,"description":"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.","name":"aria-expanded","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"boolean | \"true\" | \"false\""}},"aria-haspopup":{"defaultValue":null,"description":"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.","name":"aria-haspopup","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\""}},"aria-controls":{"defaultValue":null,"description":"Identifies the element (or elements) whose contents or presence are controlled by the current element.","name":"aria-controls","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"string"}},"aria-pressed":{"defaultValue":null,"description":"Indicates the current \"pressed\" state of toggle buttons.","name":"aria-pressed","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"boolean | \"true\" | \"false\" | \"mixed\""}},"type":{"defaultValue":{"value":"'button'"},"description":"The behavior of the button when used in an HTML form.","name":"type","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"\"button\" | \"submit\" | \"reset\""}},"preventFocusOnPress":{"defaultValue":null,"description":"Whether to prevent focus from moving to the button when pressing it.\n\nCaution, this can make the button inaccessible and should only be used when alternative keyboard interaction is provided,\nsuch as ComboBox's MenuTrigger or a NumberField's increment/decrement control.","name":"preventFocusOnPress","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"boolean"}},"excludeFromTabOrder":{"defaultValue":null,"description":"Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.","name":"excludeFromTabOrder","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusableDOMProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusableDOMProps"}],"required":false,"type":{"name":"boolean"}},"aria-label":{"defaultValue":null,"description":"Defines a string value that labels the current element.","name":"aria-label","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"}],"required":false,"type":{"name":"string"}},"aria-labelledby":{"defaultValue":null,"description":"Identifies the element (or elements) that labels the current element.","name":"aria-labelledby","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"}],"required":false,"type":{"name":"string"}},"aria-describedby":{"defaultValue":null,"description":"Identifies the element (or elements) that describes the object.","name":"aria-describedby","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"}],"required":false,"type":{"name":"string"}},"aria-details":{"defaultValue":null,"description":"Identifies the element (or elements) that provide a detailed, extended description for the object.","name":"aria-details","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"}],"required":false,"type":{"name":"string"}},"isSelected":{"defaultValue":null,"description":"Whether the element should be selected (controlled).","name":"isSelected","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"}],"required":false,"type":{"name":"boolean"}},"defaultSelected":{"defaultValue":null,"description":"Whether the element should be selected (uncontrolled).","name":"defaultSelected","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"}],"required":false,"type":{"name":"boolean"}},"onChange":{"defaultValue":null,"description":"Handler that is called when the element's selection state changes.","name":"onChange","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"}],"required":false,"type":{"name":"((isSelected: boolean) => void)"}},"isDisabled":{"defaultValue":null,"description":"Whether the button is disabled.","name":"isDisabled","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ButtonProps"}],"required":false,"type":{"name":"boolean"}},"onPress":{"defaultValue":null,"description":"Handler that is called when the press is released over the target.","name":"onPress","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: PressEvent) => void)"}},"onPressStart":{"defaultValue":null,"description":"Handler that is called when a press interaction starts.","name":"onPressStart","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: PressEvent) => void)"}},"onPressEnd":{"defaultValue":null,"description":"Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.","name":"onPressEnd","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: PressEvent) => void)"}},"onPressChange":{"defaultValue":null,"description":"Handler that is called when the press state changes.","name":"onPressChange","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((isPressed: boolean) => void)"}},"onPressUp":{"defaultValue":null,"description":"Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.","name":"onPressUp","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: PressEvent) => void)"}},"onClick":{"defaultValue":null,"description":"**Not recommended – use `onPress` instead.** `onClick` is an alias for `onPress`\nprovided for compatibility with other libraries. `onPress` provides \nadditional event details for non-mouse interactions.","name":"onClick","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: MouseEvent<FocusableElement, MouseEvent>) => void)"}},"autoFocus":{"defaultValue":null,"description":"Whether the element should receive focus on render.","name":"autoFocus","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusableProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusableProps"}],"required":false,"type":{"name":"boolean"}},"onFocus":{"defaultValue":null,"description":"Handler that is called when the element receives focus.","name":"onFocus","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"}],"required":false,"type":{"name":"((e: FocusEvent<Element, Element>) => void)"}},"onBlur":{"defaultValue":null,"description":"Handler that is called when the element loses focus.","name":"onBlur","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"}],"required":false,"type":{"name":"((e: FocusEvent<Element, Element>) => void)"}},"onFocusChange":{"defaultValue":null,"description":"Handler that is called when the element's focus status changes.","name":"onFocusChange","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"}],"required":false,"type":{"name":"((isFocused: boolean) => void)"}},"onKeyDown":{"defaultValue":null,"description":"Handler that is called when a key is pressed.","name":"onKeyDown","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"KeyboardEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"KeyboardEvents"}],"required":false,"type":{"name":"((e: KeyboardEvent) => void)"}},"onKeyUp":{"defaultValue":null,"description":"Handler that is called when a key is released.","name":"onKeyUp","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"KeyboardEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"KeyboardEvents"}],"required":false,"type":{"name":"((e: KeyboardEvent) => void)"}},"onHoverStart":{"defaultValue":null,"description":"Handler that is called when a hover interaction starts.","name":"onHoverStart","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"}],"required":false,"type":{"name":"((e: HoverEvent) => void)"}},"onHoverEnd":{"defaultValue":null,"description":"Handler that is called when a hover interaction ends.","name":"onHoverEnd","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"}],"required":false,"type":{"name":"((e: HoverEvent) => void)"}},"onHoverChange":{"defaultValue":null,"description":"Handler that is called when the hover state changes.","name":"onHoverChange","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"}],"required":false,"type":{"name":"((isHovering: boolean) => void)"}},"className":{"defaultValue":null,"description":"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.","name":"className","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"StyleRenderProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"StyleRenderProps"}],"required":false,"type":{"name":"string | ((values: ToggleButtonRenderProps & { defaultClassName: string; }) => string)"}}},"groups":{"default":{"id":{"defaultValue":null,"description":"The id of the Tile, matching the values used in TileGroup's `selectedKeys` prop.","name":"id","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"TileProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"TileProps"}],"required":true,"type":{"name":"Key"}},"style":{"defaultValue":null,"description":"The inline [style](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style) for the element. A function may be provided to compute the style based on component state.","name":"style","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"StyleRenderProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"StyleRenderProps"}],"required":false,"type":{"name":"CSSProperties | ((values: ToggleButtonRenderProps & { defaultStyle: CSSProperties; }) => CSSProperties)"}},"children":{"defaultValue":null,"description":"The children of the component. A function may be provided to alter the children based on component state.","name":"children","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"RenderProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"RenderProps"}],"required":false,"type":{"name":"ReactNode | ((values: ToggleButtonRenderProps & { defaultChildren: ReactNode; }) => ReactNode)"}},"type":{"defaultValue":{"value":"'button'"},"description":"The behavior of the button when used in an HTML form.","name":"type","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"\"button\" | \"submit\" | \"reset\""}},"isSelected":{"defaultValue":null,"description":"Whether the element should be selected (controlled).","name":"isSelected","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"}],"required":false,"type":{"name":"boolean"}},"defaultSelected":{"defaultValue":null,"description":"Whether the element should be selected (uncontrolled).","name":"defaultSelected","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"}],"required":false,"type":{"name":"boolean"}},"isDisabled":{"defaultValue":null,"description":"Whether the button is disabled.","name":"isDisabled","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ButtonProps"}],"required":false,"type":{"name":"boolean"}},"autoFocus":{"defaultValue":null,"description":"Whether the element should receive focus on render.","name":"autoFocus","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusableProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusableProps"}],"required":false,"type":{"name":"boolean"}},"className":{"defaultValue":null,"description":"The CSS [className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) for the element. A function may be provided to compute the class based on component state.","name":"className","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"StyleRenderProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"StyleRenderProps"}],"required":false,"type":{"name":"string | ((values: ToggleButtonRenderProps & { defaultClassName: string; }) => string)"}}},"Events":{"onChange":{"defaultValue":null,"description":"Handler that is called when the element's selection state changes.","name":"onChange","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"ToggleButtonProps"}],"required":false,"type":{"name":"((isSelected: boolean) => void)"}},"onPress":{"defaultValue":null,"description":"Handler that is called when the press is released over the target.","name":"onPress","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: PressEvent) => void)"}},"onPressStart":{"defaultValue":null,"description":"Handler that is called when a press interaction starts.","name":"onPressStart","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: PressEvent) => void)"}},"onPressEnd":{"defaultValue":null,"description":"Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target.","name":"onPressEnd","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: PressEvent) => void)"}},"onPressChange":{"defaultValue":null,"description":"Handler that is called when the press state changes.","name":"onPressChange","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((isPressed: boolean) => void)"}},"onPressUp":{"defaultValue":null,"description":"Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not.","name":"onPressUp","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: PressEvent) => void)"}},"onClick":{"defaultValue":null,"description":"**Not recommended – use `onPress` instead.** `onClick` is an alias for `onPress`\nprovided for compatibility with other libraries. `onPress` provides \nadditional event details for non-mouse interactions.","name":"onClick","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"PressEvents"}],"required":false,"type":{"name":"((e: MouseEvent<FocusableElement, MouseEvent>) => void)"}},"onFocus":{"defaultValue":null,"description":"Handler that is called when the element receives focus.","name":"onFocus","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"}],"required":false,"type":{"name":"((e: FocusEvent<Element, Element>) => void)"}},"onBlur":{"defaultValue":null,"description":"Handler that is called when the element loses focus.","name":"onBlur","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"}],"required":false,"type":{"name":"((e: FocusEvent<Element, Element>) => void)"}},"onFocusChange":{"defaultValue":null,"description":"Handler that is called when the element's focus status changes.","name":"onFocusChange","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusEvents"}],"required":false,"type":{"name":"((isFocused: boolean) => void)"}},"onKeyDown":{"defaultValue":null,"description":"Handler that is called when a key is pressed.","name":"onKeyDown","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"KeyboardEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"KeyboardEvents"}],"required":false,"type":{"name":"((e: KeyboardEvent) => void)"}},"onKeyUp":{"defaultValue":null,"description":"Handler that is called when a key is released.","name":"onKeyUp","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"KeyboardEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"KeyboardEvents"}],"required":false,"type":{"name":"((e: KeyboardEvent) => void)"}},"onHoverStart":{"defaultValue":null,"description":"Handler that is called when a hover interaction starts.","name":"onHoverStart","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"}],"required":false,"type":{"name":"((e: HoverEvent) => void)"}},"onHoverEnd":{"defaultValue":null,"description":"Handler that is called when a hover interaction ends.","name":"onHoverEnd","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"}],"required":false,"type":{"name":"((e: HoverEvent) => void)"}},"onHoverChange":{"defaultValue":null,"description":"Handler that is called when the hover state changes.","name":"onHoverChange","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"HoverEvents"}],"required":false,"type":{"name":"((isHovering: boolean) => void)"}}},"Layout":{"slot":{"defaultValue":null,"description":"A slot name for the component. Slots allow the component to receive props from a parent component.\nAn explicit `null` value indicates that the local props completely override all props received from a parent.","name":"slot","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"SlotProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"SlotProps"}],"required":false,"type":{"name":"string | null"}}},"Spacing":{},"Sizing":{},"Background":{},"Borders":{},"Shadows":{},"Positioning":{},"Typography":{},"Accessibility":{"aria-expanded":{"defaultValue":null,"description":"Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.","name":"aria-expanded","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"boolean | \"true\" | \"false\""}},"aria-haspopup":{"defaultValue":null,"description":"Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.","name":"aria-haspopup","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"boolean | \"dialog\" | \"menu\" | \"grid\" | \"true\" | \"false\" | \"listbox\" | \"tree\""}},"aria-controls":{"defaultValue":null,"description":"Identifies the element (or elements) whose contents or presence are controlled by the current element.","name":"aria-controls","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"string"}},"aria-pressed":{"defaultValue":null,"description":"Indicates the current \"pressed\" state of toggle buttons.","name":"aria-pressed","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"boolean | \"true\" | \"false\" | \"mixed\""}},"preventFocusOnPress":{"defaultValue":null,"description":"Whether to prevent focus from moving to the button when pressing it.\n\nCaution, this can make the button inaccessible and should only be used when alternative keyboard interaction is provided,\nsuch as ComboBox's MenuTrigger or a NumberField's increment/decrement control.","name":"preventFocusOnPress","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaBaseButtonProps"}],"required":false,"type":{"name":"boolean"}},"excludeFromTabOrder":{"defaultValue":null,"description":"Whether to exclude the element from the sequential tab order. If true,\nthe element will not be focusable via the keyboard by tabbing. This should\nbe avoided except in rare scenarios where an alternative means of accessing\nthe element or its functionality via the keyboard is available.","name":"excludeFromTabOrder","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusableDOMProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"FocusableDOMProps"}],"required":false,"type":{"name":"boolean"}},"aria-label":{"defaultValue":null,"description":"Defines a string value that labels the current element.","name":"aria-label","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"}],"required":false,"type":{"name":"string"}},"aria-labelledby":{"defaultValue":null,"description":"Identifies the element (or elements) that labels the current element.","name":"aria-labelledby","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"}],"required":false,"type":{"name":"string"}},"aria-describedby":{"defaultValue":null,"description":"Identifies the element (or elements) that describes the object.","name":"aria-describedby","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"}],"required":false,"type":{"name":"string"}},"aria-details":{"defaultValue":null,"description":"Identifies the element (or elements) that provide a detailed, extended description for the object.","name":"aria-details","parent":{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"},"declarations":[{"fileName":"/packages/components/src/tile/src/Tile.tsx","name":"AriaLabelingProps"}],"required":false,"type":{"name":"string"}}}}}]